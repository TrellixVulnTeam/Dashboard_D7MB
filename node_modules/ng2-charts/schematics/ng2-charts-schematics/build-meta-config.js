"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildMetaConfig = void 0;
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const parse_name_1 = require("@schematics/angular/utility/parse-name");
const workspace_1 = require("@schematics/angular/utility/workspace");
const schematics_2 = require("@angular/cdk/schematics");
function buildMetaConfig(options) {
    return (tree) => __awaiter(this, void 0, void 0, function* () {
        const workspace = yield workspace_1.getWorkspace(tree);
        const projectName = options.project || workspace.extensions.defaultProject;
        const project = workspace.projects.get(projectName);
        if (!project) {
            throw new schematics_1.SchematicsException(`Unable to find project '${project}' in the workspace`);
        }
        const buildOptions = schematics_2.getProjectTargetOptions(project, 'build');
        const modulePath = schematics_2.getAppModulePath(tree, buildOptions.main);
        const parsedPath = parse_name_1.parseName(core_1.dirname(core_1.normalize(modulePath)), 'not applicable');
        // const metaname = parsedPath.name;
        // const metapath = parsedPath.path;
        const templateSource = schematics_1.apply(schematics_1.url('./files'), [
            schematics_1.applyTemplates(Object.assign(Object.assign(Object.assign({}, core_1.strings), { 'if-flat': (s) => options.flat ? '' : s }), options)),
            schematics_1.move(parsedPath.path),
        ]);
        const recorder = tree.beginUpdate(modulePath);
        schematics_1.mergeWith(templateSource);
        tree.commitUpdate(recorder);
    });
}
exports.buildMetaConfig = buildMetaConfig;
//# sourceMappingURL=build-meta-config.js.map