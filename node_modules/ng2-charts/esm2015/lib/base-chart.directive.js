import { Directive, ElementRef, EventEmitter, Input, NgZone, Output, } from '@angular/core';
import { Chart } from 'chart.js';
import { ThemeService } from './theme.service';
import { distinctUntilChanged } from 'rxjs/operators';
import { merge } from 'lodash-es';
export class BaseChartDirective {
    constructor(element, zone, themeService) {
        this.element = element;
        this.zone = zone;
        this.themeService = themeService;
        this.type = 'bar';
        this.plugins = [];
        this.chartClick = new EventEmitter();
        this.chartHover = new EventEmitter();
        this.subs = [];
        this.ctx = element.nativeElement.getContext('2d');
        this.subs.push(this.themeService.colorschemesOptions
            .pipe(distinctUntilChanged())
            .subscribe(r => this.themeChanged(r)));
    }
    ngOnChanges(changes) {
        const requireRender = ['type'];
        const propertyNames = Object.getOwnPropertyNames(changes);
        if (propertyNames.some(key => requireRender.includes(key)) ||
            propertyNames.every(key => changes[key].isFirstChange())) {
            this.render();
        }
        else {
            const config = this.getChartConfiguration();
            if (this.chart) {
                Object.assign(this.chart.config.data, config.data);
                Object.assign(this.chart.config.plugins, config.plugins);
                Object.assign(this.chart.config.options, config.options);
            }
            this.update();
        }
    }
    ngOnDestroy() {
        if (this.chart) {
            this.chart.destroy();
            this.chart = void 0;
        }
        this.subs.forEach(s => s.unsubscribe());
    }
    render() {
        if (this.chart) {
            this.chart.destroy();
        }
        return this.chart = new Chart(this.ctx, this.getChartConfiguration());
    }
    update(duration) {
        if (this.chart) {
            this.zone.runOutsideAngular(() => { var _a; return (_a = this.chart) === null || _a === void 0 ? void 0 : _a.update(duration); });
        }
    }
    hideDataset(index, hidden) {
        if (this.chart) {
            this.chart.getDatasetMeta(index).hidden = hidden;
            this.update();
        }
    }
    isDatasetHidden(index) {
        var _a, _b;
        return (_b = (_a = this.chart) === null || _a === void 0 ? void 0 : _a.getDatasetMeta(index)) === null || _b === void 0 ? void 0 : _b.hidden;
    }
    toBase64Image() {
        var _a;
        return (_a = this.chart) === null || _a === void 0 ? void 0 : _a.toBase64Image();
    }
    themeChanged(options) {
        this.themeOverrides = options;
        if (this.chart) {
            Object.assign(this.chart.config.options, this.getChartOptions());
            this.update();
        }
    }
    getChartOptions() {
        return merge({
            onHover: (event, active) => {
                if (active && !active.length) {
                    return;
                }
                this.chartHover.emit({ event, active });
            },
            onClick: (event, active) => {
                this.chartClick.emit({ event, active });
            }
        }, this.themeOverrides, this.options, {
            plugins: {
                legend: {
                    display: this.legend
                }
            }
        });
    }
    getChartConfiguration() {
        return {
            type: this.type,
            data: this.getChartData(),
            plugins: this.plugins,
            options: this.getChartOptions()
        };
    }
    getChartData() {
        return this.data ? this.data : {
            labels: this.labels || [],
            datasets: this.datasets || []
        };
    }
}
BaseChartDirective.decorators = [
    { type: Directive, args: [{
                // eslint-disable-next-line @angular-eslint/directive-selector
                selector: 'canvas[baseChart]',
                exportAs: 'base-chart'
            },] }
];
BaseChartDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: ThemeService }
];
BaseChartDirective.propDecorators = {
    type: [{ type: Input }],
    legend: [{ type: Input }],
    data: [{ type: Input }],
    options: [{ type: Input }],
    plugins: [{ type: Input }],
    labels: [{ type: Input }],
    datasets: [{ type: Input }],
    chartClick: [{ type: Output }],
    chartHover: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,