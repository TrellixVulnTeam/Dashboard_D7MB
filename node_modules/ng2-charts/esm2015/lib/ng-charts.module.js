import { Injectable, NgModule, Optional, SkipSelf } from '@angular/core';
import { BaseChartDirective } from './base-chart.directive';
import { ArcElement, BarController, BarElement, BubbleController, CategoryScale, Chart, defaults, DoughnutController, Filler, Legend, LinearScale, LineController, LineElement, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, ScatterController, TimeSeriesScale, Title, Tooltip } from 'chart.js';
import { merge } from "lodash-es";
import { builtInDefaults } from "./get-colors";
import * as i0 from "@angular/core";
Chart.register(Title, Tooltip, Filler, Legend, LineController, LineElement, PointElement, LinearScale, CategoryScale, BarController, BarElement, DoughnutController, ArcElement, RadarController, RadialLinearScale, PieController, PolarAreaController, BubbleController, ScatterController, TimeSeriesScale);
export class NgChartsModule {
    constructor(config, parentModule) {
        if (parentModule) {
            throw new Error('NgChartsModule is already loaded. Use .forRoot() in the AppModule only');
        }
        if (config === null || config === void 0 ? void 0 : config.plugins)
            Chart.register(config === null || config === void 0 ? void 0 : config.plugins);
        const ngChartsDefaults = merge(builtInDefaults, (config === null || config === void 0 ? void 0 : config.defaults) || {});
        defaults.set(ngChartsDefaults);
    }
    static forRoot(config) {
        return {
            ngModule: NgChartsModule,
            providers: [
                { provide: NgChartsConfiguration, useValue: config }
            ]
        };
    }
}
NgChartsModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [BaseChartDirective],
                exports: [BaseChartDirective]
            },] }
];
NgChartsModule.ctorParameters = () => [
    { type: NgChartsConfiguration, decorators: [{ type: Optional }] },
    { type: NgChartsModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
export class NgChartsConfiguration {
}
NgChartsConfiguration.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgChartsConfiguration_Factory() { return new NgChartsConfiguration(); }, token: NgChartsConfiguration, providedIn: NgChartsModule });
NgChartsConfiguration.decorators = [
    { type: Injectable, args: [{ providedIn: NgChartsModule },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2hhcnRzLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nMi1jaGFydHMvc3JjL2xpYi9uZy1jaGFydHMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQXVCLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFDTCxVQUFVLEVBQ1YsYUFBYSxFQUNiLFVBQVUsRUFDVixnQkFBZ0IsRUFDaEIsYUFBYSxFQUNiLEtBQUssRUFHTCxRQUFRLEVBQ1Isa0JBQWtCLEVBQ2xCLE1BQU0sRUFDTixNQUFNLEVBQ04sV0FBVyxFQUNYLGNBQWMsRUFDZCxXQUFXLEVBQ1gsYUFBYSxFQUNiLFlBQVksRUFDWixtQkFBbUIsRUFDbkIsZUFBZSxFQUNmLGlCQUFpQixFQUNqQixpQkFBaUIsRUFDakIsZUFBZSxFQUNmLEtBQUssRUFDTCxPQUFPLEVBQ1IsTUFBTSxVQUFVLENBQUM7QUFDbEIsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNsQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sY0FBYyxDQUFDOztBQUUvQyxLQUFLLENBQUMsUUFBUSxDQUNaLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFDOUIsY0FBYyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFDckUsYUFBYSxFQUFFLFVBQVUsRUFDekIsa0JBQWtCLEVBQUUsVUFBVSxFQUM5QixlQUFlLEVBQUUsaUJBQWlCLEVBQ2xDLGFBQWEsRUFDYixtQkFBbUIsRUFDbkIsZ0JBQWdCLEVBQ2hCLGlCQUFpQixFQUNqQixlQUFlLENBQUMsQ0FBQztBQU9uQixNQUFNLE9BQU8sY0FBYztJQUV6QixZQUF3QixNQUE4QixFQUEwQixZQUE2QjtRQUMzRyxJQUFJLFlBQVksRUFBRTtZQUNoQixNQUFNLElBQUksS0FBSyxDQUNiLHdFQUF3RSxDQUFDLENBQUM7U0FDN0U7UUFFRCxJQUFJLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxPQUFPO1lBQ2pCLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRWxDLE1BQU0sZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFBLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxRQUFRLEtBQUksRUFBRSxDQUFDLENBQUM7UUFFeEUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQWdFO1FBQ3BGLE9BQU87WUFDTCxRQUFRLEVBQUUsY0FBYztZQUN4QixTQUFTLEVBQUU7Z0JBQ1QsRUFBRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRTthQUNyRDtTQUNGLENBQUM7SUFDSixDQUFDOzs7WUE1QkYsUUFBUSxTQUFDO2dCQUNSLE9BQU8sRUFBRSxFQUFFO2dCQUNYLFlBQVksRUFBRSxDQUFFLGtCQUFrQixDQUFFO2dCQUNwQyxPQUFPLEVBQUUsQ0FBRSxrQkFBa0IsQ0FBRTthQUNoQzs7O1lBR2tDLHFCQUFxQix1QkFBekMsUUFBUTtZQUEwRSxjQUFjLHVCQUFwRCxRQUFRLFlBQUksUUFBUTs7QUF5Qi9FLE1BQU0sT0FBTyxxQkFBcUI7Ozs7WUFEakMsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlLCBPcHRpb25hbCwgU2tpcFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJhc2VDaGFydERpcmVjdGl2ZSB9IGZyb20gJy4vYmFzZS1jaGFydC5kaXJlY3RpdmUnO1xuaW1wb3J0IHtcbiAgQXJjRWxlbWVudCxcbiAgQmFyQ29udHJvbGxlcixcbiAgQmFyRWxlbWVudCxcbiAgQnViYmxlQ29udHJvbGxlcixcbiAgQ2F0ZWdvcnlTY2FsZSxcbiAgQ2hhcnQsXG4gIENoYXJ0Q29tcG9uZW50TGlrZSxcbiAgQ2hhcnRDb25maWd1cmF0aW9uLFxuICBkZWZhdWx0cyxcbiAgRG91Z2hudXRDb250cm9sbGVyLFxuICBGaWxsZXIsXG4gIExlZ2VuZCxcbiAgTGluZWFyU2NhbGUsXG4gIExpbmVDb250cm9sbGVyLFxuICBMaW5lRWxlbWVudCxcbiAgUGllQ29udHJvbGxlcixcbiAgUG9pbnRFbGVtZW50LFxuICBQb2xhckFyZWFDb250cm9sbGVyLFxuICBSYWRhckNvbnRyb2xsZXIsXG4gIFJhZGlhbExpbmVhclNjYWxlLFxuICBTY2F0dGVyQ29udHJvbGxlcixcbiAgVGltZVNlcmllc1NjYWxlLFxuICBUaXRsZSxcbiAgVG9vbHRpcFxufSBmcm9tICdjaGFydC5qcyc7XG5pbXBvcnQgeyBtZXJnZSB9IGZyb20gXCJsb2Rhc2gtZXNcIjtcbmltcG9ydCB7IGJ1aWx0SW5EZWZhdWx0cyB9IGZyb20gXCIuL2dldC1jb2xvcnNcIjtcblxuQ2hhcnQucmVnaXN0ZXIoXG4gIFRpdGxlLCBUb29sdGlwLCBGaWxsZXIsIExlZ2VuZCxcbiAgTGluZUNvbnRyb2xsZXIsIExpbmVFbGVtZW50LCBQb2ludEVsZW1lbnQsIExpbmVhclNjYWxlLCBDYXRlZ29yeVNjYWxlLFxuICBCYXJDb250cm9sbGVyLCBCYXJFbGVtZW50LFxuICBEb3VnaG51dENvbnRyb2xsZXIsIEFyY0VsZW1lbnQsXG4gIFJhZGFyQ29udHJvbGxlciwgUmFkaWFsTGluZWFyU2NhbGUsXG4gIFBpZUNvbnRyb2xsZXIsXG4gIFBvbGFyQXJlYUNvbnRyb2xsZXIsXG4gIEJ1YmJsZUNvbnRyb2xsZXIsXG4gIFNjYXR0ZXJDb250cm9sbGVyLFxuICBUaW1lU2VyaWVzU2NhbGUpO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXSxcbiAgZGVjbGFyYXRpb25zOiBbIEJhc2VDaGFydERpcmVjdGl2ZSBdLFxuICBleHBvcnRzOiBbIEJhc2VDaGFydERpcmVjdGl2ZSBdXG59KVxuZXhwb3J0IGNsYXNzIE5nQ2hhcnRzTW9kdWxlIHtcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBjb25maWc/OiBOZ0NoYXJ0c0NvbmZpZ3VyYXRpb24sIEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHBhcmVudE1vZHVsZT86IE5nQ2hhcnRzTW9kdWxlKSB7XG4gICAgaWYgKHBhcmVudE1vZHVsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnTmdDaGFydHNNb2R1bGUgaXMgYWxyZWFkeSBsb2FkZWQuIFVzZSAuZm9yUm9vdCgpIGluIHRoZSBBcHBNb2R1bGUgb25seScpO1xuICAgIH1cblxuICAgIGlmIChjb25maWc/LnBsdWdpbnMpXG4gICAgICBDaGFydC5yZWdpc3Rlcihjb25maWc/LnBsdWdpbnMpO1xuXG4gICAgY29uc3QgbmdDaGFydHNEZWZhdWx0cyA9IG1lcmdlKGJ1aWx0SW5EZWZhdWx0cywgY29uZmlnPy5kZWZhdWx0cyB8fCB7fSk7XG5cbiAgICBkZWZhdWx0cy5zZXQobmdDaGFydHNEZWZhdWx0cyk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGZvclJvb3QoY29uZmlnPzogUGljazxDaGFydENvbmZpZ3VyYXRpb24sICdwbHVnaW5zJz4gJiB7IGRlZmF1bHRzOiBhbnkgfSk6IE1vZHVsZVdpdGhQcm92aWRlcnM8TmdDaGFydHNNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE5nQ2hhcnRzTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHsgcHJvdmlkZTogTmdDaGFydHNDb25maWd1cmF0aW9uLCB1c2VWYWx1ZTogY29uZmlnIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogTmdDaGFydHNNb2R1bGUgfSlcbmV4cG9ydCBjbGFzcyBOZ0NoYXJ0c0NvbmZpZ3VyYXRpb24ge1xuICBwdWJsaWMgcGx1Z2lucz86IENoYXJ0Q29tcG9uZW50TGlrZTtcbiAgcHVibGljIGRlZmF1bHRzPzogYW55O1xufVxuIl19